Example 1:
```
fn main() {
    let mut s = String::from("hello");
    let ref1 = &s;
    let ref2 = &ref1;
    let ref3 = &ref2;
    s = String::from("goodbye");
    println!("{}", ref3.to_uppercase());
}
```
s被借走了，在借走的生命周期中不允许修改。
SOL: 将修改移到后面


Example 2:
```
fn drip_drop() -> &String {
    let s = String::from("hello world!");
    return &s;
}
```
s的生命周期在函数内，返回的只是一个引用，并不能移走owner，所以在函数结束后会被释放掉。
SOL：返回s（将owner一并移走）

Example 3:
```
fn main() {
    let s1 = String::from("hello");
    let mut v = Vec::new();
    v.push(s1);
    let s2: String = v[0];
    println!("{}", s2);
}
```
一个变量同时只能被一个owner
SOL: s2可以借用s1的owner
